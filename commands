
Main commands used in daily use

git init
	initalizes a empty repository
	adds a .git directory with all files required. 

git log [-option]:
	shows all commits, includeds hashes merges
	for quick check add the optino --oneline
		makes each entry only contain one line in terminal 


git add [file1,file2,... , fileX]:
	adds the changes made to the cache allowing commit to take them.
	eg: git add main.cpp	-> adds the file main into the cache ready for a commit.
	
	if there is a need to add all files use {git add *} which will add all files/changes 

git commit [-option]:
	places current cached changes into a commit,
	generates SHA1 hash for commit.
	
	different options allows for different reactions
		reccomend usage of opion [-m] to add message directly. 
		without option will open text editor for message
	eg: git commit -m "inital commit" -> saves changes using git add with the message "inital commit"
	
git branch [-option] [branchName]
	shows all branches.
	* indicates the branch which is currently active. 
	headless checkout will indicate the commit which is active
	
	can be used to create branch 
	eg : git branch -c SecondBranch -> creates a branch named SecondBranch
		~ git branch
		branch1
		mainBranch
		*CurrentlyActiveBranch
	
	
git switch [branchName]
	switches to a different branch 
	quickest use to switch between branches. 

git checkout [commit]:
	changes the main reference which is used for data.
	can be used to change to old commits which are no longer the latest in the branch
	can use tags instead of branch or hash to change to commit
	
	eg: git checkout secondBranch 	-> changes to latest commit in secondBranch
	git checkout 2af28332 		-> changes to commit with the specified hash
	git checkout tag2		-> changes to commit with tag


git merge [branch/commit]
	merges the specified branches changes into the current 
	eg:
		~ git branch
		main
		A
		*B
		~ git merge A
		adding changes in A into B making a commit with 2 parents

git diff [branch1] [branch2]
	compares the two different branches and shows the differences
	will assume branch1 is base and show branch2 as changes. 
		

git merge-base [branch1] [branch2]
	shows where branch1 diverges from branch2
	only shows SHA1 hash, compare with git log to find commit 


	----------DO NOT USE IF REMOTE REPOSITORY IS ACTIVE ------------------ 
git rebase [branch/commit]
	changes the parent tree of the origin of the branch 
	Makes the history seems like the branch is just appended on the other one.
	better to use merge if possible.
-----------------------------------------------------Remote----------------------------------------------------


git push [-option] 
	syncronized the local repository to the remote repository.
	adds changes in local to remote. 
	
	by default will only push the current branch.

	options:	[REMOTE] == name of the remote repository 
	[REMOTE] --all				pushes all branches
	[REMOTE] '*:*'				pushes all branches and tags. 
	--set-upstream [REMOTE] [branchName]	adds and pushes current branch (used first time push)

------------------------------------------------------------------------------------------------------------------
Good to have commands. generally pluming commands

git cat-file [-option] [hash/commit]
	shows the info in the file
	used similar as linux command cat.
	option -p shows all info, best practice to use -p
	eg: git cat-file -p afa93b733bc		-> shows the full commit with said hash
	
	can use tags, branches instead of hash. same principle
	can be used for all hashes generated by git.


